name: build
on:
  workflow_dispatch: {}
jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-22.04
            rust: nightly
            target: x86_64-unknown-linux-gnu
            artifact-name: DynamoDB_Rust-linux.tar.gz
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
            artifact-name: DynamoDB_Rust-macos.tar.gz
          - build: windows
            os: windows-2019
            rust: nightly-x86_64-msvc
            target: x86_64-pc-windows-msvc
            artifact-name: DynamoDB_Rust-windows.7z
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Strip binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/ms-demo"

      - name: Build artifact
        shell: bash
        run: |
          mkdir artifact
          cd artifact
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/${{ matrix.target }}/release/ms-demo.exe" ./
            7z a "${{ matrix.artifact-name }}" ms-demo.exe
          else
            cp "../target/${{ matrix.target }}/release/ms-demo" ./
            tar -czf "${{ matrix.artifact-name }}" ms-demo
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: artifact/${{ matrix.artifact-name }}
